package ui;

import dao.CustomerDAO;
import model.Customer;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.net.URL;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;

public class CustomerPanel extends JPanel {
    private Connection conn;
    private CustomerDAO customerDAO;
    private DefaultTableModel tableModel;
    private JTable customerTable;
    private JTextField searchField;

    public CustomerPanel(Connection conn) {
        this.conn = conn;
        this.customerDAO = new CustomerDAO(conn);
        setLayout(new BorderLayout());
        setBackground(Color.WHITE);
        initUI();
        loadCustomers();
    }

    private void initUI() {
        setLayout(new BorderLayout());

        // ===== Panel ti√™u ƒë·ªÅ =====
        JLabel titleLabel = new JLabel("Qu·∫£n l√Ω kh√°ch h√†ng", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20));
        titleLabel.setForeground(new Color(255, 105, 180));

        // ===== Panel t√¨m ki·∫øm =====
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        searchPanel.setBackground(Color.WHITE);
        searchField = new JTextField(20);
        JButton searchButton = new JButton("T√¨m ki·∫øm");
        searchButton.setBackground(new Color(255, 182, 193));
        searchButton.addActionListener(e -> searchCustomers());
        searchPanel.add(searchField);
        searchPanel.add(searchButton);

        // ===== G·ªôp ti√™u ƒë·ªÅ v√† t√¨m ki·∫øm v√†o topPanel =====
        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.setBackground(Color.WHITE);
        topPanel.add(titleLabel, BorderLayout.NORTH); // Ti√™u ƒë·ªÅ ·ªü tr√™n
        topPanel.add(searchPanel, BorderLayout.WEST);  // T√¨m ki·∫øm ·ªü b√™n tr√°i
        add(topPanel, BorderLayout.NORTH);             // Th√™m topPanel v√†o tr√™n c√πng

        // ===== B·∫£ng hi·ªÉn th·ªã kh√°ch h√†ng =====
        String[] columns = {"M√£ KH", "T√™n KH", "ƒê·ªãa ch·ªâ", "Gi·ªõi t√≠nh", "S·ªë ƒëi·ªán tho·∫°i"};
        tableModel = new DefaultTableModel(columns, 0);
        customerTable = new JTable(tableModel);
        customerTable.setRowHeight(25);
        customerTable.setFont(new Font("Arial", Font.PLAIN, 14));
        JScrollPane scrollPane = new JScrollPane(customerTable);
        add(scrollPane, BorderLayout.CENTER);

        // ===== Panel ghi ch√∫ =====
        JLabel noteLabel = new JLabel("*Hi·ªÉn th·ªã danh s√°ch kh√°ch h√†ng l·∫•y d·ªØ li·ªáu t·ª´ database*", SwingConstants.CENTER);
        noteLabel.setFont(new Font("Arial", Font.ITALIC, 12));
        noteLabel.setForeground(Color.GRAY);

        // ===== Panel n√∫t ch·ª©c nƒÉng =====
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        buttonPanel.setBackground(Color.WHITE);
        JButton deleteButton = new JButton("X√≥a kh√°ch h√†ng");
        JButton updateButton = new JButton("C·∫≠p nh·∫≠t");
        JButton addButton = new JButton("Th√™m kh√°ch h√†ng");

        // C√†i ƒë·∫∑t m√†u n·ªÅn v√† font ch·ªØ cho c√°c n√∫t
        addButton.setBackground(new Color(255, 182, 193));
        updateButton.setBackground(new Color(255, 182, 193));
        deleteButton.setBackground(new Color(255, 182, 193));
        addButton.setFont(new Font("Arial", Font.BOLD, 14));
        updateButton.setFont(new Font("Arial", Font.BOLD, 14));
        deleteButton.setFont(new Font("Arial", Font.BOLD, 14));
        addButton.setFocusPainted(false);
        updateButton.setFocusPainted(false);
        deleteButton.setFocusPainted(false);

        // Th√™m h√¨nh ·∫£nh cho c√°c n√∫t
        String[] buttonNames = {"add.png", "update.png", "delete.png"};
        JButton[] buttons = {addButton, updateButton, deleteButton};

        for (int i = 0; i < buttons.length; i++) {
            URL imageUrl = getClass().getResource("/Image/" + buttonNames[i]);
            if (imageUrl != null) {
                ImageIcon icon = new ImageIcon(imageUrl);
                Image scaledImage = icon.getImage().getScaledInstance(30, 30, Image.SCALE_SMOOTH);
                buttons[i].setIcon(new ImageIcon(scaledImage));
                buttons[i].setHorizontalAlignment(SwingConstants.LEFT);
                buttons[i].setIconTextGap(10);
            } else {
                System.err.println("Kh√¥ng t√¨m th·∫•y ·∫£nh /Image/" + buttonNames[i] + ". N√∫t ch·ªâ hi·ªÉn th·ªã text.");
            }
        }

        deleteButton.addActionListener(e -> deleteCustomer());
        updateButton.addActionListener(e -> updateCustomer());
        addButton.addActionListener(e -> addCustomer());

        buttonPanel.add(addButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(deleteButton);

        // ===== Panel d∆∞·ªõi c√πng (ghi ch√∫ + n√∫t) =====
        JPanel bottomPanel = new JPanel(new BorderLayout());
        bottomPanel.setBackground(Color.WHITE);
        bottomPanel.add(noteLabel, BorderLayout.NORTH);
        bottomPanel.add(buttonPanel, BorderLayout.CENTER);

        add(bottomPanel, BorderLayout.SOUTH);
    }

    private void loadCustomers() {
        try {
            tableModel.setRowCount(0); // X√≥a d·ªØ li·ªáu c≈©
            ArrayList<Customer> customers = customerDAO.getAllCustomers();
            for (Customer customer : customers) {
                Object[] row = {
                    customer.getCustomerId(),
                    customer.getCustomerName(),
                    customer.getAddress(),
                    customer.getGender(),
                    customer.getPhone()
                };
                tableModel.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi t·∫£i danh s√°ch kh√°ch h√†ng: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void searchCustomers() {
        String keyword = searchField.getText().trim();
        try {
            tableModel.setRowCount(0);
            ArrayList<Customer> customers = customerDAO.searchByName(keyword);
            for (Customer customer : customers) {
                Object[] row = {
                    customer.getCustomerId(),
                    customer.getCustomerName(),
                    customer.getAddress(),
                    customer.getGender(),
                    customer.getPhone()
                };
                tableModel.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi t√¨m ki·∫øm kh√°ch h√†ng: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteCustomer() {
        int selectedRow = customerTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn m·ªôt kh√°ch h√†ng ƒë·ªÉ x√≥a!", "C·∫£nh b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int customerId = (int) tableModel.getValueAt(selectedRow, 0);
        int confirm = JOptionPane.showConfirmDialog(this, "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a kh√°ch h√†ng n√†y?", "X√°c nh·∫≠n", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                boolean success = customerDAO.deleteCustomer(customerId);
                if (success) {
                    loadCustomers();
                    JOptionPane.showMessageDialog(this, "X√≥a kh√°ch h√†ng th√†nh c√¥ng!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "X√≥a kh√°ch h√†ng th·∫•t b·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "L·ªói khi x√≥a kh√°ch h√†ng: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void updateCustomer() {
        int selectedRow = customerTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn m·ªôt kh√°ch h√†ng ƒë·ªÉ c·∫≠p nh·∫≠t!", "C·∫£nh b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int customerId = (int) tableModel.getValueAt(selectedRow, 0);
        String customerName = (String) tableModel.getValueAt(selectedRow, 1);
        String address = (String) tableModel.getValueAt(selectedRow, 2);
        String gender = (String) tableModel.getValueAt(selectedRow, 3);
        String phone = (String) tableModel.getValueAt(selectedRow, 4);

        // T·∫°o c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        JTextField idField = new JTextField(String.valueOf(customerId), 15);
        idField.setEditable(false); // M√£ kh√°ch h√†ng kh√¥ng cho s·ª≠a
        JTextField nameField = new JTextField(customerName, 15);
        JTextField addressField = new JTextField(address, 15);

        // L·∫•y d·ªØ li·ªáu gi·ªõi t√≠nh t·ª´ c∆° s·ªü d·ªØ li·ªáu
        JComboBox<String> genderCombo = new JComboBox<>();
        try {
            ArrayList<String> genderTypes = customerDAO.getGenderTypes();
            for (String type : genderTypes) {
                genderCombo.addItem(type);
            }
            genderCombo.addItem("Kh√°c");
            genderCombo.setSelectedItem(gender); // ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "L·ªói khi t·∫£i gi·ªõi t√≠nh: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        }

        JTextField phoneField = new JTextField(phone, 15);

        // T·∫°o form
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setBackground(new Color(255, 240, 245));
        formPanel.setBorder(BorderFactory.createTitledBorder("üßë C·∫≠p nh·∫≠t kh√°ch h√†ng"));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(6, 6, 6, 6);
        gbc.anchor = GridBagConstraints.WEST;

        // H√†ng 1
        gbc.gridx = 0; gbc.gridy = 0; formPanel.add(new JLabel("M√£ kh√°ch h√†ng:"), gbc);
        gbc.gridx = 1; formPanel.add(idField, gbc);
        gbc.gridx = 2; formPanel.add(new JLabel("T√™n kh√°ch h√†ng:"), gbc);
        gbc.gridx = 3; formPanel.add(nameField, gbc);

        // H√†ng 2
        gbc.gridx = 0; gbc.gridy = 1; formPanel.add(new JLabel("ƒê·ªãa ch·ªâ:"), gbc);
        gbc.gridx = 1; gbc.gridwidth = 3; formPanel.add(addressField, gbc);
        gbc.gridwidth = 1; // Reset gridwidth

        // H√†ng 3
        gbc.gridx = 0; gbc.gridy = 2; formPanel.add(new JLabel("Gi·ªõi t√≠nh:"), gbc);
        gbc.gridx = 1; formPanel.add(genderCombo, gbc);
        gbc.gridx = 2; formPanel.add(new JLabel("S·ªë ƒëi·ªán tho·∫°i:"), gbc);
        gbc.gridx = 3; formPanel.add(phoneField, gbc);

        // N√∫t ch·ª©c nƒÉng
        JButton cancelButton = new JButton("‚ùå H·ªßy");
        JButton saveButton = new JButton("üíæ L∆∞u");

        Color buttonColor = new Color(255, 182, 193);
        cancelButton.setBackground(buttonColor);
        saveButton.setBackground(buttonColor);
        cancelButton.setFocusPainted(false);
        saveButton.setFocusPainted(false);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        buttonPanel.setBackground(new Color(255, 240, 245));
        buttonPanel.add(cancelButton);
        buttonPanel.add(saveButton);

        // Container
        JPanel container = new JPanel(new BorderLayout());
        container.add(formPanel, BorderLayout.CENTER);
        container.add(buttonPanel, BorderLayout.SOUTH);

        // Hi·ªÉn th·ªã dialog
        JDialog dialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "‚ûï C·∫≠p nh·∫≠t kh√°ch h√†ng", true);
        dialog.setContentPane(container);
        dialog.pack();
        dialog.setLocationRelativeTo(this);

        // X·ª≠ l√Ω n√∫t L∆∞u
        saveButton.addActionListener(e -> {
            try {
                Customer updatedCustomer = new Customer(
                    customerId,
                    nameField.getText(),
                    addressField.getText(),
                    (String) genderCombo.getSelectedItem(),
                    phoneField.getText()
                );
                boolean success = customerDAO.updateCustomer(updatedCustomer);
                if (success) {
                    loadCustomers();
                    JOptionPane.showMessageDialog(this, "C·∫≠p nh·∫≠t kh√°ch h√†ng th√†nh c√¥ng!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                    dialog.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "C·∫≠p nh·∫≠t kh√°ch h√†ng th·∫•t b·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "L·ªói khi c·∫≠p nh·∫≠t kh√°ch h√†ng: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        });

        // X·ª≠ l√Ω n√∫t H·ªßy
        cancelButton.addActionListener(e -> dialog.dispose());

        dialog.setVisible(true);
    }

    private void addCustomer() {
        JTextField nameField = new JTextField(20);
        JTextField addressField = new JTextField(20);
        JTextField genderField = new JTextField(10);
        JTextField phoneField = new JTextField(15);

        JPanel panel = new JPanel(new GridLayout(4, 2, 5, 5));
        panel.add(new JLabel("T√™n kh√°ch h√†ng:"));
        panel.add(nameField);
        panel.add(new JLabel("ƒê·ªãa ch·ªâ:"));
        panel.add(addressField);
        panel.add(new JLabel("Gi·ªõi t√≠nh:"));
        panel.add(genderField);
        panel.add(new JLabel("S·ªë ƒëi·ªán tho·∫°i:"));
        panel.add(phoneField);

        int result = JOptionPane.showConfirmDialog(this, panel, "Th√™m kh√°ch h√†ng", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            try {
                Customer newCustomer = new Customer(
                    0, // MaKhachHang s·∫Ω t·ª± tƒÉng
                    nameField.getText(),
                    addressField.getText(),
                    genderField.getText(),
                    phoneField.getText()
                );
                boolean success = customerDAO.insertCustomer(newCustomer);
                if (success) {
                    loadCustomers();
                    JOptionPane.showMessageDialog(this, "Th√™m kh√°ch h√†ng th√†nh c√¥ng!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Th√™m kh√°ch h√†ng th·∫•t b·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "L·ªói khi th√™m kh√°ch h√†ng: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}